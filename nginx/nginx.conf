worker_processes  1;   # 서버가 일을 처리할 '사람(프로세스)'을 몇 명 둘지 정하는 거야.  
                      # 마치 공부할 때 친구 한 명만 도와주기로 하는 것과 같아.

events {
    worker_connections  1024;  
    # 각 '사람'이 동시에 몇 명까지 손님(요청)을 맞이할 수 있는지 정하는 거야.
    # 친구 한 명이 동시에 1024명과 게임할 수 있다고 상상해 보자!
}

http {
    include       mime.types;           
    # mime.types 파일은 '파일 사전' 같아.  
    # 예를 들어 .html이 글자파일인지, .png가 그림파일인지 알려줘.

    default_type  application/octet-stream;  
    # 사전에도 없는 낯선 파일이 오면, 'octet-stream'이라는 기본 파일로 취급하겠다는 뜻이야.

    sendfile        on;  
    # sendfile은 '서류를 특급 배송'하듯, 파일을 빠르게 전송하라는 옵션이야.

    keepalive_timeout  65;  
    # 한 번 연결한 문(소켓)을 65초 동안 열어두고,  
    # 계속 같은 손님이 드나들 수 있게 해주는 친구 같은 설정이야.

    limit_req_zone $binary_remote_addr zone=teemo:10m rate=1r/s;  
    # 'teemo'라는 이름표가 붙은 구역을 만들어서,  
    # 한 아이피당 초당 1번만 들어오게 신호등을 설치하는 거야.

    upstream siu {
        server siu:3000;
        server siu2:3001;
        # siu 교실에는 두 명의 선생님(siu와 siu2)이 번갈아 가며 수업을 해.
    }
    upstream sonny {
        server sonny:3002;
        # sonny 교실에는 sonny 선생님 한 분이 수업을 해.
    }

    #──────────────────────────────────
    # 1) HTTP 서버 (80번 문) — 챌린지 응답 + HTTPS 교실 안내
    #──────────────────────────────────
    server {
        listen       80;                          
        # 80번 문 앞에서 '안녕, 누구세요?' 하고 손님을 기다리는 거야.

        server_name  joshua-legend.p-e.kr;        
        # 우리 교실의 이름표, 이 호스트 이름이 맞아야 여기로 와.

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;                
            # 인증 도장(토큰)을 확인하는 우체국 창고가 /var/www/certbot이야.
        }

        return 301 https://$host$request_uri;    
        # HTTP로 오면 '여기 말고 HTTPS 교실(443번)로 가!' 하고   
        # 301번(영구 이동) 안내문을 보내주는 거야.
    }

    #──────────────────────────────────
    # 2) HTTPS 서버 (443번 문) — 안전 문 + 수업 진행
    #──────────────────────────────────
    server {
        listen       443 ssl http2;               
        # 443번 문은 자물쇠(SSL/TLS) 달린 안전 문, HTTP/2도 지원해.

        server_name  joshua-legend.p-e.kr;        
        # 여기도 우리 교실 이름이 맞아야 들어올 수 있어.

        ssl_certificate      /etc/letsencrypt/live/joshua-legend.p-e.kr/fullchain.pem;
        # CA(인증기관)가 발급해 준 '신분증 풀체인' 파일.
        ssl_certificate_key  /etc/letsencrypt/live/joshua-legend.p-e.kr/privkey.pem;
        # 신분증 열쇠(Private Key). 서버만 알고 있어야 해.

        ssl_protocols        TLSv1.2 TLSv1.3;      
        # 허용할 비밀 언어 버전을 정하는 거야.  
        # TLS1.2, TLS1.3만 쓰자!

        ssl_ciphers          HIGH:!aNULL:!MD5;     
        # 안전 등급이 높은 암호화 수수께끼(HIGH)만 쓰고,  
        # 인증 없는(!aNULL), MD5 기반(!MD5)은 빼는 설정이야.

        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        # HSTS: 한 번 안전 문으로 들어오면 앞으로도 계속 HTTPS만 쓰라고  
        # '1년 동안(31536000초)' 약속서에 서명하는 것과 같아.

        # — siu 교실로 안내
        location /siu/ {
            proxy_pass       http://siu/;         
            # siu:3000/siu/ 로 연결해 주는 통로 설치!
            proxy_set_header Host $host;           
            # 손님이 원래 부른 교실 이름도 함께 알려주자.
            proxy_set_header X-Real-IP $remote_addr;
            # 손님(클라이언트)의 실제 집주소(IP)도 기록.
        }

        # — sonny 교실로 안내
        location /sonny/ {
            proxy_pass       http://sonny/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        error_page   500 502 503 504  /50x.html;
        # 수업 중 문제가 생기면(500~504),  
        # 50x.html이라는 에러 안내판으로 안내해 줘.
        location = /50x.html {
            root   html;
        }
    }
}
